buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'war'
	id 'eclipse-wtp'
	id 'org.springframework.boot' version '2.7.0'
	id 'com.bmuschko.cargo' version '2.9.0'
	id 'org.hidetake.ssh' version '2.9.0'
}

group = 'eu.woolplatform'
version = '1.2.0' // run updateVersion after changing this property
sourceCompatibility = 11
targetCompatibility = 11
archivesBaseName = 'wool-webservice'

configurations {
	providedRuntime
}

dependencies {
	// implementation project(':WoolCore')	// Use the local WOOL Core project source, AND:
	// implementation project(':WoolUtils') // Also include WOOL Utils from project source, OR:

	// https://mvnrepository.com/artifact/eu.woolplatform/wool-core
	implementation group: 'eu.woolplatform', name: 'wool-core', version: '2.2.6'	// Use the maven central distribution of WOOL Core.

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

	// https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'

	// https://mvnrepository.com/artifact/org.springframework/spring-context-support
	implementation group: 'org.springframework', name: 'spring-context-support', version: '5.3.20'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.4.13'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
	providedRuntime group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.4.13'

	cargo 'org.codehaus.cargo:cargo-core:1.9.11'
	cargo 'org.codehaus.cargo:cargo-ant:1.9.11'
}

def cargoTomcatDeployPath = project.hasProperty('tomcatDeployPath') ? tomcatDeployPath : ''
def cargoRemoteTomcatHost = project.hasProperty('remoteTomcatHost') ? remoteTomcatHost : ''
def cargoRemoteTomcatUser = project.hasProperty('remoteTomcatUser') ? remoteTomcatUser : ''
def cargoRemoteTomcatPassword = project.hasProperty('remoteTomcatPassword') ? remoteTomcatPassword : ''
def cargoRemoteTomcatPort = project.hasProperty('remoteTomcatPort') ? remoteTomcatPort : 0

cargo {
	containerId = 'tomcat8x'

	deployable {
		context = cargoTomcatDeployPath
	}

	remote {
		hostname = cargoRemoteTomcatHost
		username = cargoRemoteTomcatUser
		password = cargoRemoteTomcatPassword
	}
}

tasks.matching({ it.name =~ /cargo.*Remote/ }).each() {
	it.port = cargoRemoteTomcatPort.toInteger()
}

task updateConfig {
	group = 'configuration'
	description = 'Configures files with current values of woolconfig properties from gradle.properties.'

	doLast() {
		Properties props = new Properties()
		def propPrefix = 'woolconfig'
		project.properties.each { key, value ->
			if (!key.startsWith(propPrefix))
				return
			key = key.substring(propPrefix.length())
			key = key[0].toLowerCase() + key.substring(1)
			props[key] = value
		}
		def resDir = file('src/main/resources')
		resDir.mkdirs()
		def out = new File(resDir, 'service.properties')
		out.withWriter('UTF-8') {
			props.store(it, 'DO NOT EDIT, generated with gradlew updateConfig')
		}
	}
}

def listDirFiles(dir, writer) {
	writer.write('[')
	def first = true
	dir.eachFile() { child ->
		if (!first)
			writer.write(',')
		if (child.isDirectory()) {
			writer.write('{"' + child.name + '":')
			listDirFiles(child, writer)
			writer.write('}')
			first = false
		} else if (child.name.endsWith('.json') || child.name.endsWith('.wool')) {
			writer.write('"' + child.name + '"')
			first = false
		}
	}
	writer.write(']')
}

task listDialogueFiles {
	group = 'configuration'
	description = 'Lists dialogue files and writes them to dialogues.json'

	doLast() {
		def dlgDir = file('src/main/resources/dialogues')
		def dlgFile = file('src/main/resources/dialogues/dialogues.json')
		dlgFile.withWriter('UTF-8') { writer ->
			writer.write('{')
			def first = true
			dlgDir.eachDir() { dir ->
				if (first)
					first = false
				else
					writer.write(',')
				writer.write('"' + dir.name + '":')
				listDirFiles(dir, writer)
			}
			writer.write('}')
		}
	}
}

task updateVersion {
	group = 'versioning'
	description = 'Writes the current version to files containing the version number.'

	doLast() {
		ant.replaceregexp(file: 'src/main/webapp/WEB-INF/web.xml',
			match: "<display-name>WOOL Web Service .+</display-name>",
			replace: "<display-name>WOOL Web Service ${version}</display-name>")
		ant.replaceregexp(file: 'src/main/resources/deployment.properties',
			match: "version=.+",
			replace: "version=${version}")
	}
}

task checkResources {
	group = 'build'
	description = 'Checks if required resource files exist and are up-to-date.'

	dependsOn updateConfig, listDialogueFiles
}

test {
	testLogging.showStandardStreams = true
}

gradle.taskGraph.whenReady {
	tasks.withType(Test) {
		def props = new Properties()
		def propsFile = file('gradle.test.properties')
		if (propsFile.exists()) {
			propsFile.withReader('UTF-8') {
				props.load(it)
			}
			props.each { key, value ->
				systemProperty key, value
			}
		}
	}
}

javadoc {
	options {
		links 'https://docs.oracle.com/javase/10/docs/api/'
		addStringOption('Xdoclint:all,-html', '-quiet')
	}
}

processResources.dependsOn checkResources
